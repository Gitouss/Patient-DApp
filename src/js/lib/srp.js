// Generated by CoffeeScript 1.10.0
(function() {
  var BigInteger, SRP, createHash, parameters, randomBytes, transform;

  BigInteger = require('jsbn').BigInteger;

  createHash = require('create-hash');

  randomBytes = require('randombytes');

  transform = require('./transform');

  parameters = require('./parameters');

  SRP = (function() {
    function SRP(length) {
      this.params = parameters.get(length);
    }

    SRP.prototype.x = function(options) {
      var I, P, identifierPasswordHash, result, salt, xHash;
      I = options.I;
      P = options.P;
      salt = options.salt;
      identifierPasswordHash = createHash(this.params.hash).update(I).update(new Buffer(':')).update(P).digest();
      xHash = createHash(this.params.hash).update(salt).update(identifierPasswordHash).digest();
      result = transform.buffer.toBigInteger(xHash);
      return result;
    };

    SRP.prototype.v = function(options) {
      var I, P, result, salt;
      I = options.I;
      P = options.P;
      salt = options.salt;
      result = this.params.g.modPow(this.x(options), this.params.N);
      result = transform.pad.toN(result, this.params);
      return result;
    };

    SRP.prototype.a = function(callback) {
      return randomBytes(32, function(err, resultBuf) {
        var result;
        result = transform.buffer.toBigInteger(resultBuf);
        return callback(err, result);
      });
    };

    SRP.prototype.b = function(callback) {
      return randomBytes(32, function(err, resultBuf) {
        var result;
        result = transform.buffer.toBigInteger(resultBuf);
        return callback(err, result);
      });
    };

    SRP.prototype.A = function(options) {
      var a, result;
      a = options.a;
      result = this.params.g.modPow(a, this.params.N);
      result = transform.pad.toN(result, this.params);
      return result;
    };

    SRP.prototype.B = function(options) {
      var b, result, v;
      v = options.v;
      b = options.b;
      result = this.k().multiply(v).add(this.params.g.modPow(b, this.params.N)).mod(this.params.N);
      result = transform.pad.toN(result, this.params);
      return result;
    };

    SRP.prototype.u = function(options) {
      var A, B, result;
      A = options.A;
      B = options.B;
      result = createHash(this.params.hash).update(A).update(B).digest();
      result = transform.buffer.toBigInteger(result);
      return result;
    };

    SRP.prototype.clientS = function(options) {
      var B, a, result, u, x;
      B = options.B;
      a = options.a;
      u = options.u;
      x = options.x;
      result = B.subtract(this.k().multiply(this.params.g.modPow(x, this.params.N))).modPow(a.add(u.multiply(x)), this.params.N);
      result = transform.pad.toN(result, this.params);
      return result;
    };

    SRP.prototype.serverS = function(options) {
      var A, b, result, u, v;
      A = options.A;
      v = options.v;
      u = options.u;
      b = options.b;
      result = A.multiply(v.modPow(u, this.params.N)).modPow(b, this.params.N);
      result = transform.pad.toN(result, this.params);
      return result;
    };

    SRP.prototype.k = function() {
      var result;
      result = createHash(this.params.hash).update(transform.pad.toN(this.params.N, this.params)).update(transform.pad.toN(this.params.g, this.params)).digest();
      result = transform.buffer.toBigInteger(result);
      return result;
    };

    SRP.prototype.K = function(options) {
      var S, result;
      S = options.S;
      result = createHash(this.params.hash).update(S).digest();
      return result;
    };

    SRP.prototype.M1 = function(options) {
      var A, B, K, result;
      A = options.A;
      B = options.B;
      K = options.K;
      result = createHash(this.params.hash).update(A).update(B).update(K).digest();
      return result;
    };

    SRP.prototype.M2 = function(options) {
      var A, K, M, result;
      A = options.A;
      M = options.M;
      K = options.K;
      result = createHash(this.params.hash).update(A).update(M).update(K).digest();
      return result;
    };

    SRP.prototype.generateSalt = function(callback) {
      return randomBytes(32, function(err, resultBuf) {
        return callback(err, resultBuf);
      });
    };

    SRP.prototype.isZeroWhenModN = function(thisBigInt) {
      return thisBigInt.mod(this.params.N).equals(BigInteger.ZERO);
    };

    return SRP;

  })();

  module.exports = SRP;

}).call(this);
